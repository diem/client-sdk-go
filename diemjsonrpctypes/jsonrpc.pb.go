// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// This is the definition of json-rpc service response data structures for keeping
// server and client in sync by generating code from this definition.
//
// Protobuf happens to be able to generate code that exactly match with json-rpc response
// data structure defined by Rust implementation, which gives us chance to swap in
// the code generated from this definition and reduce the cost of maintaining and syncing
// json-rpc response data structure in different client languages.
//
// Thrift and open-api are not well fit, simply because we can't use them to define a schema
// that can serialize & deserialize exactly same json data defined by Rust implementation.
// JSON schema can be used to define our schema, but it has no high quality code generator
// across languages that we need.
//
// == How to use ==
//
// 1. Generate code by protoc.
// 2. The generated data types can be used to deserialize Diem JSON-RPC response#result
//    object.
// 3. Use protobuf json format parser deserialize response#result.
// 4. As protobuf does not provide functions to deserialize list of objects, when
//    response#result is an array, you need use the parser deserialize object in the
//    array and then collect them as array.
//
// May checkout python implementation as example: https://github.com/diem/client-sdk-python/blob/master/src/diem/jsonrpc/client.py#L474
//
// For each data type detail document, please checkout https://github.com/diem/diem/blob/master/json-rpc/json-rpc-spec.md.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: jsonrpc.proto

package diemjsonrpctypes

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{0}
}

func (x *Amount) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Amount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex-encoded bytes
	Address        string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balances       []*Amount `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	SequenceNumber uint64    `protobuf:"varint,3,opt,name=sequence_number,proto3" json:"sequence_number,omitempty"`
	// hex-encoded bytes
	AuthenticationKey string `protobuf:"bytes,4,opt,name=authentication_key,proto3" json:"authentication_key,omitempty"`
	// hex-encoded bytes
	SentEventsKey string `protobuf:"bytes,5,opt,name=sent_events_key,proto3" json:"sent_events_key,omitempty"`
	// hex-encoded bytes
	ReceivedEventsKey              string       `protobuf:"bytes,6,opt,name=received_events_key,proto3" json:"received_events_key,omitempty"`
	DelegatedKeyRotationCapability bool         `protobuf:"varint,7,opt,name=delegated_key_rotation_capability,proto3" json:"delegated_key_rotation_capability,omitempty"`
	DelegatedWithdrawalCapability  bool         `protobuf:"varint,8,opt,name=delegated_withdrawal_capability,proto3" json:"delegated_withdrawal_capability,omitempty"`
	IsFrozen                       bool         `protobuf:"varint,9,opt,name=is_frozen,json=delegated_withdrawal_capability,proto3" json:"is_frozen,omitempty"`
	Role                           *AccountRole `protobuf:"bytes,10,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetBalances() []*Amount {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *Account) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Account) GetAuthenticationKey() string {
	if x != nil {
		return x.AuthenticationKey
	}
	return ""
}

func (x *Account) GetSentEventsKey() string {
	if x != nil {
		return x.SentEventsKey
	}
	return ""
}

func (x *Account) GetReceivedEventsKey() string {
	if x != nil {
		return x.ReceivedEventsKey
	}
	return ""
}

func (x *Account) GetDelegatedKeyRotationCapability() bool {
	if x != nil {
		return x.DelegatedKeyRotationCapability
	}
	return false
}

func (x *Account) GetDelegatedWithdrawalCapability() bool {
	if x != nil {
		return x.DelegatedWithdrawalCapability
	}
	return false
}

func (x *Account) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

func (x *Account) GetRole() *AccountRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type AccountRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ParentVaspAddress string `protobuf:"bytes,2,opt,name=parent_vasp_address,proto3" json:"parent_vasp_address,omitempty"`
	HumanName         string `protobuf:"bytes,3,opt,name=human_name,proto3" json:"human_name,omitempty"`
	BaseUrl           string `protobuf:"bytes,4,opt,name=base_url,proto3" json:"base_url,omitempty"`
	ExpirationTime    uint64 `protobuf:"varint,5,opt,name=expiration_time,proto3" json:"expiration_time,omitempty"`
	// hex-encoded bytes
	ComplianceKey string `protobuf:"bytes,6,opt,name=compliance_key,proto3" json:"compliance_key,omitempty"`
	// hex-encoded bytes
	ComplianceKeyRotationEventsKey string `protobuf:"bytes,7,opt,name=compliance_key_rotation_events_key,proto3" json:"compliance_key_rotation_events_key,omitempty"`
	// hex-encoded bytes
	BaseUrlRotationEventsKey string `protobuf:"bytes,8,opt,name=base_url_rotation_events_key,proto3" json:"base_url_rotation_events_key,omitempty"`
	NumChildren              uint64 `protobuf:"varint,9,opt,name=num_children,proto3" json:"num_children,omitempty"`
	// hex-encoded bytes
	ReceivedMintEventsKey string    `protobuf:"bytes,10,opt,name=received_mint_events_key,proto3" json:"received_mint_events_key,omitempty"`
	PreburnBalances       []*Amount `protobuf:"bytes,11,rep,name=preburn_balances,proto3" json:"preburn_balances,omitempty"`
}

func (x *AccountRole) Reset() {
	*x = AccountRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRole) ProtoMessage() {}

func (x *AccountRole) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRole.ProtoReflect.Descriptor instead.
func (*AccountRole) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{2}
}

func (x *AccountRole) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccountRole) GetParentVaspAddress() string {
	if x != nil {
		return x.ParentVaspAddress
	}
	return ""
}

func (x *AccountRole) GetHumanName() string {
	if x != nil {
		return x.HumanName
	}
	return ""
}

func (x *AccountRole) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AccountRole) GetExpirationTime() uint64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *AccountRole) GetComplianceKey() string {
	if x != nil {
		return x.ComplianceKey
	}
	return ""
}

func (x *AccountRole) GetComplianceKeyRotationEventsKey() string {
	if x != nil {
		return x.ComplianceKeyRotationEventsKey
	}
	return ""
}

func (x *AccountRole) GetBaseUrlRotationEventsKey() string {
	if x != nil {
		return x.BaseUrlRotationEventsKey
	}
	return ""
}

func (x *AccountRole) GetNumChildren() uint64 {
	if x != nil {
		return x.NumChildren
	}
	return 0
}

func (x *AccountRole) GetReceivedMintEventsKey() string {
	if x != nil {
		return x.ReceivedMintEventsKey
	}
	return ""
}

func (x *AccountRole) GetPreburnBalances() []*Amount {
	if x != nil {
		return x.PreburnBalances
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SequenceNumber     uint64     `protobuf:"varint,2,opt,name=sequence_number,proto3" json:"sequence_number,omitempty"`
	TransactionVersion uint64     `protobuf:"varint,3,opt,name=transaction_version,proto3" json:"transaction_version,omitempty"`
	Data               *EventData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{3}
}

func (x *Event) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Event) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Event) GetTransactionVersion() uint64 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *Event) GetData() *EventData {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// burn, cancelburn, mint, preburn, receivedpayment, sentpayment, receivedmint events
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// burn, cancelburn, preburn events
	// hex-encoded bytes
	PreburnAddress string `protobuf:"bytes,3,opt,name=preburn_address,proto3" json:"preburn_address,omitempty"`
	// to_xdx_exchange_rate_update event only
	CurrencyCode         string  `protobuf:"bytes,4,opt,name=currency_code,proto3" json:"currency_code,omitempty"`
	NewToXdxExchangeRate float32 `protobuf:"fixed32,5,opt,name=new_to_xdx_exchange_rate,proto3" json:"new_to_xdx_exchange_rate,omitempty"`
	// receivedpayment and sentpayment events
	// hex-encoded bytes
	Sender string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	// hex-encoded bytes
	Receiver string `protobuf:"bytes,7,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// hex-encoded bytes
	Metadata string `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// newepoch event only
	Epoch uint64 `protobuf:"varint,10,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// newblock event only
	Round uint64 `protobuf:"varint,11,opt,name=round,proto3" json:"round,omitempty"`
	// hex-encoded bytes
	Proposer     string `protobuf:"bytes,12,opt,name=proposer,proto3" json:"proposer,omitempty"`
	ProposedTime uint64 `protobuf:"varint,13,opt,name=proposed_time,proto3" json:"proposed_time,omitempty"`
	// receivedmint event only
	// hex-encoded bytes
	DestinationAddress string `protobuf:"bytes,14,opt,name=destination_address,proto3" json:"destination_address,omitempty"`
	// compliancekeyrotation event only
	// hex-encoded bytes
	NewCompliancePublicKey string `protobuf:"bytes,15,opt,name=new_compliance_public_key,proto3" json:"new_compliance_public_key,omitempty"`
	// baseurlrotation event only
	NewBaseUrl string `protobuf:"bytes,16,opt,name=new_base_url,proto3" json:"new_base_url,omitempty"`
	// compliancekeyrotation and baseurlrotation events
	TimeRotatedSeconds uint64 `protobuf:"varint,17,opt,name=time_rotated_seconds,proto3" json:"time_rotated_seconds,omitempty"`
	//*
	// createaccount event field.
	// Hex-encoded account address bytes of the created account.
	CreatedAddress string `protobuf:"bytes,18,opt,name=created_address,proto3" json:"created_address,omitempty"`
	//*
	// createaccount event field.
	// Role id of the created account, see [LIP-2](https://dip.diem.com/dip-2/#move-implementation)
	// for more details
	RoleId uint64 `protobuf:"varint,19,opt,name=role_id,proto3" json:"role_id,omitempty"`
	//*
	// admintransaction event field.
	// The block time when this transaction is committed.
	// It is created by validators.
	CommittedTimestampSecs uint64 `protobuf:"varint,20,opt,name=committed_timestamp_secs,proto3" json:"committed_timestamp_secs,omitempty"`
}

func (x *EventData) Reset() {
	*x = EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{4}
}

func (x *EventData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventData) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *EventData) GetPreburnAddress() string {
	if x != nil {
		return x.PreburnAddress
	}
	return ""
}

func (x *EventData) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *EventData) GetNewToXdxExchangeRate() float32 {
	if x != nil {
		return x.NewToXdxExchangeRate
	}
	return 0
}

func (x *EventData) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *EventData) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *EventData) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *EventData) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *EventData) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *EventData) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *EventData) GetProposedTime() uint64 {
	if x != nil {
		return x.ProposedTime
	}
	return 0
}

func (x *EventData) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *EventData) GetNewCompliancePublicKey() string {
	if x != nil {
		return x.NewCompliancePublicKey
	}
	return ""
}

func (x *EventData) GetNewBaseUrl() string {
	if x != nil {
		return x.NewBaseUrl
	}
	return ""
}

func (x *EventData) GetTimeRotatedSeconds() uint64 {
	if x != nil {
		return x.TimeRotatedSeconds
	}
	return 0
}

func (x *EventData) GetCreatedAddress() string {
	if x != nil {
		return x.CreatedAddress
	}
	return ""
}

func (x *EventData) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *EventData) GetCommittedTimestampSecs() uint64 {
	if x != nil {
		return x.CommittedTimestampSecs
	}
	return 0
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The block (ledger) version
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	//*
	// The block (ledger) timestamp, unit is microsecond
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//*
	// Chain ID of the Diem network
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	//*
	// List of allowed scripts hex-encoded hash bytes, server may not return this field
	// if the allow list not found in on chain configuration.
	ScriptHashAllowList []string `protobuf:"bytes,4,rep,name=script_hash_allow_list,proto3" json:"script_hash_allow_list,omitempty"`
	//*
	// True for allowing publishing customized script, server may not return this field
	// if the flag not found in on chain configuration.
	ModulePublishingAllowed bool `protobuf:"varint,5,opt,name=module_publishing_allowed,proto3" json:"module_publishing_allowed,omitempty"`
	//*
	// Diem chain major version number.
	DiemVersion uint64 `protobuf:"varint,6,opt,name=diem_version,proto3" json:"diem_version,omitempty"`
	//*
	// accumulator root hash of the ledger version requested
	AccumulatorRootHash string `protobuf:"bytes,7,opt,name=accumulator_root_hash,proto3" json:"accumulator_root_hash,omitempty"`
	//*
	// The dual attestation limit on-chain. Defined in terms of micro-XDX.
	DualAttestationLimit uint64 `protobuf:"varint,8,opt,name=dual_attestation_limit,proto3" json:"dual_attestation_limit,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Metadata) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Metadata) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Metadata) GetScriptHashAllowList() []string {
	if x != nil {
		return x.ScriptHashAllowList
	}
	return nil
}

func (x *Metadata) GetModulePublishingAllowed() bool {
	if x != nil {
		return x.ModulePublishingAllowed
	}
	return false
}

func (x *Metadata) GetDiemVersion() uint64 {
	if x != nil {
		return x.DiemVersion
	}
	return 0
}

func (x *Metadata) GetAccumulatorRootHash() string {
	if x != nil {
		return x.AccumulatorRootHash
	}
	return ""
}

func (x *Metadata) GetDualAttestationLimit() uint64 {
	if x != nil {
		return x.DualAttestationLimit
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     uint64           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Transaction *TransactionData `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Hash        string           `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// hex-encoded bcs bytes
	Bytes    string    `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Events   []*Event  `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	VmStatus *VMStatus `protobuf:"bytes,6,opt,name=vm_status,proto3" json:"vm_status,omitempty"`
	GasUsed  uint64    `protobuf:"varint,7,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetTransaction() *TransactionData {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetBytes() string {
	if x != nil {
		return x.Bytes
	}
	return ""
}

func (x *Transaction) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Transaction) GetVmStatus() *VMStatus {
	if x != nil {
		return x.VmStatus
	}
	return nil
}

func (x *Transaction) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

type MoveAbortExplaination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category            string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	CategoryDescription string `protobuf:"bytes,2,opt,name=category_description,proto3" json:"category_description,omitempty"`
	Reason              string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	ReasonDescription   string `protobuf:"bytes,4,opt,name=reason_description,proto3" json:"reason_description,omitempty"`
}

func (x *MoveAbortExplaination) Reset() {
	*x = MoveAbortExplaination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveAbortExplaination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveAbortExplaination) ProtoMessage() {}

func (x *MoveAbortExplaination) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveAbortExplaination.ProtoReflect.Descriptor instead.
func (*MoveAbortExplaination) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{7}
}

func (x *MoveAbortExplaination) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MoveAbortExplaination) GetCategoryDescription() string {
	if x != nil {
		return x.CategoryDescription
	}
	return ""
}

func (x *MoveAbortExplaination) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *MoveAbortExplaination) GetReasonDescription() string {
	if x != nil {
		return x.ReasonDescription
	}
	return ""
}

type VMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// move_abort, execution_failure
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// move_abort only
	AbortCode uint64 `protobuf:"varint,3,opt,name=abort_code,proto3" json:"abort_code,omitempty"`
	// execution_failure only
	FunctionIndex uint32 `protobuf:"varint,4,opt,name=function_index,proto3" json:"function_index,omitempty"`
	CodeOffset    uint32 `protobuf:"varint,5,opt,name=code_offset,proto3" json:"code_offset,omitempty"`
	// move_abort only
	Explanation *MoveAbortExplaination `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *VMStatus) Reset() {
	*x = VMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatus) ProtoMessage() {}

func (x *VMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatus.ProtoReflect.Descriptor instead.
func (*VMStatus) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{8}
}

func (x *VMStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VMStatus) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *VMStatus) GetAbortCode() uint64 {
	if x != nil {
		return x.AbortCode
	}
	return 0
}

func (x *VMStatus) GetFunctionIndex() uint32 {
	if x != nil {
		return x.FunctionIndex
	}
	return 0
}

func (x *VMStatus) GetCodeOffset() uint32 {
	if x != nil {
		return x.CodeOffset
	}
	return 0
}

func (x *VMStatus) GetExplanation() *MoveAbortExplaination {
	if x != nil {
		return x.Explanation
	}
	return nil
}

type TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// blockmetadata
	TimestampUsecs uint64 `protobuf:"varint,2,opt,name=timestamp_usecs,proto3" json:"timestamp_usecs,omitempty"`
	// user
	Sender          string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	SignatureScheme string `protobuf:"bytes,4,opt,name=signature_scheme,proto3" json:"signature_scheme,omitempty"`
	Signature       string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// hex-encoded bytes
	PublicKey               string `protobuf:"bytes,6,opt,name=public_key,proto3" json:"public_key,omitempty"`
	SequenceNumber          uint64 `protobuf:"varint,7,opt,name=sequence_number,proto3" json:"sequence_number,omitempty"`
	ChainId                 uint32 `protobuf:"varint,8,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	MaxGasAmount            uint64 `protobuf:"varint,9,opt,name=max_gas_amount,proto3" json:"max_gas_amount,omitempty"`
	GasUnitPrice            uint64 `protobuf:"varint,10,opt,name=gas_unit_price,proto3" json:"gas_unit_price,omitempty"`
	GasCurrency             string `protobuf:"bytes,11,opt,name=gas_currency,proto3" json:"gas_currency,omitempty"`
	ExpirationTimestampSecs uint64 `protobuf:"varint,12,opt,name=expiration_timestamp_secs,proto3" json:"expiration_timestamp_secs,omitempty"`
	ScriptHash              string `protobuf:"bytes,13,opt,name=script_hash,proto3" json:"script_hash,omitempty"`
	// hex-encoded bytes
	ScriptBytes string  `protobuf:"bytes,14,opt,name=script_bytes,proto3" json:"script_bytes,omitempty"`
	Script      *Script `protobuf:"bytes,15,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *TransactionData) Reset() {
	*x = TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionData) ProtoMessage() {}

func (x *TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionData.ProtoReflect.Descriptor instead.
func (*TransactionData) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionData) GetTimestampUsecs() uint64 {
	if x != nil {
		return x.TimestampUsecs
	}
	return 0
}

func (x *TransactionData) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TransactionData) GetSignatureScheme() string {
	if x != nil {
		return x.SignatureScheme
	}
	return ""
}

func (x *TransactionData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransactionData) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *TransactionData) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TransactionData) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TransactionData) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *TransactionData) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *TransactionData) GetGasCurrency() string {
	if x != nil {
		return x.GasCurrency
	}
	return ""
}

func (x *TransactionData) GetExpirationTimestampSecs() uint64 {
	if x != nil {
		return x.ExpirationTimestampSecs
	}
	return 0
}

func (x *TransactionData) GetScriptHash() string {
	if x != nil {
		return x.ScriptHash
	}
	return ""
}

func (x *TransactionData) GetScriptBytes() string {
	if x != nil {
		return x.ScriptBytes
	}
	return ""
}

func (x *TransactionData) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Name of the script code, see https://github.com/diem/diem/blob/master/language/stdlib/transaction_scripts/doc/transaction_script_documentation.md for all available script names.
	// Type is set as "unknown" if script code can't be recognized, or transaction payload is not a script.
	// It is possible server side does not know the code and the code is valid.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	//*
	// Hex-encoded compiled move script bytes.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	//*
	// List of string value of the script arguments. Contains type information.
	// Argument value to string formatting:
	// - u8 value `12` => "{U8: 12}"
	// - u64 value `12244` => "{U64: 12244}"
	// - u128 value `12244` => "{U128: 12244}"
	// - boolean value `true` => "{BOOL: true}"
	// - Account address value => "{ADDRESS: <hex-encoded account address bytes>}"
	// - List<u8> value => "{U8Vector:: 0x<hex-encoded bytes>}"
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	//*
	// List of type arguments, converted into string.
	TypeArguments []string `protobuf:"bytes,4,rep,name=type_arguments,proto3" json:"type_arguments,omitempty"`
	//*
	// hex-encoded receiver account address bytes
	Receiver string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	//*
	// peer to peer transfer amount.
	Amount uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	//*
	// peer to peer transfer currency code.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	//*
	// Metadata of the transaction, BCS serialized hex-encoded string.
	// See [LIP-4](https://dip.diem.com/dip-4/) for more details.
	Metadata string `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	//*
	// Hex-encoded metadata signature, use this to validate metadata.
	// See [LIP-4](https://dip.diem.com/dip-4/) for more details.
	MetadataSignature string `protobuf:"bytes,9,opt,name=metadata_signature,proto3" json:"metadata_signature,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{10}
}

func (x *Script) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Script) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Script) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Script) GetTypeArguments() []string {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *Script) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Script) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Script) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Script) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Script) GetMetadataSignature() string {
	if x != nil {
		return x.MetadataSignature
	}
	return ""
}

type CurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code              string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	ScalingFactor     uint64  `protobuf:"varint,2,opt,name=scaling_factor,proto3" json:"scaling_factor,omitempty"`
	FractionalPart    uint64  `protobuf:"varint,3,opt,name=fractional_part,proto3" json:"fractional_part,omitempty"`
	ToXdxExchangeRate float32 `protobuf:"fixed32,4,opt,name=to_xdx_exchange_rate,proto3" json:"to_xdx_exchange_rate,omitempty"`
	// hex-encoded bytes
	MintEventsKey string `protobuf:"bytes,5,opt,name=mint_events_key,proto3" json:"mint_events_key,omitempty"`
	// hex-encoded bytes
	BurnEventsKey string `protobuf:"bytes,6,opt,name=burn_events_key,proto3" json:"burn_events_key,omitempty"`
	// HEX-encoded bytes
	PreburnEventsKey string `protobuf:"bytes,7,opt,name=preburn_events_key,proto3" json:"preburn_events_key,omitempty"`
	// hex-encoded bytes
	CancelBurnEventsKey string `protobuf:"bytes,8,opt,name=cancel_burn_events_key,proto3" json:"cancel_burn_events_key,omitempty"`
	// hex-encoded bytes
	ExchangeRateUpdateEventsKey string `protobuf:"bytes,9,opt,name=exchange_rate_update_events_key,proto3" json:"exchange_rate_update_events_key,omitempty"`
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{11}
}

func (x *CurrencyInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CurrencyInfo) GetScalingFactor() uint64 {
	if x != nil {
		return x.ScalingFactor
	}
	return 0
}

func (x *CurrencyInfo) GetFractionalPart() uint64 {
	if x != nil {
		return x.FractionalPart
	}
	return 0
}

func (x *CurrencyInfo) GetToXdxExchangeRate() float32 {
	if x != nil {
		return x.ToXdxExchangeRate
	}
	return 0
}

func (x *CurrencyInfo) GetMintEventsKey() string {
	if x != nil {
		return x.MintEventsKey
	}
	return ""
}

func (x *CurrencyInfo) GetBurnEventsKey() string {
	if x != nil {
		return x.BurnEventsKey
	}
	return ""
}

func (x *CurrencyInfo) GetPreburnEventsKey() string {
	if x != nil {
		return x.PreburnEventsKey
	}
	return ""
}

func (x *CurrencyInfo) GetCancelBurnEventsKey() string {
	if x != nil {
		return x.CancelBurnEventsKey
	}
	return ""
}

func (x *CurrencyInfo) GetExchangeRateUpdateEventsKey() string {
	if x != nil {
		return x.ExchangeRateUpdateEventsKey
	}
	return ""
}

type StateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex-encoded bcs bytes
	LedgerInfoWithSignatures string `protobuf:"bytes,1,opt,name=ledger_info_with_signatures,proto3" json:"ledger_info_with_signatures,omitempty"`
	// hex-encoded bcs bytes
	EpochChangeProof string `protobuf:"bytes,2,opt,name=epoch_change_proof,proto3" json:"epoch_change_proof,omitempty"`
	// hex-encoded bcs bytes
	LedgerConsistencyProof string `protobuf:"bytes,3,opt,name=ledger_consistency_proof,proto3" json:"ledger_consistency_proof,omitempty"`
}

func (x *StateProof) Reset() {
	*x = StateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateProof) ProtoMessage() {}

func (x *StateProof) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateProof.ProtoReflect.Descriptor instead.
func (*StateProof) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{12}
}

func (x *StateProof) GetLedgerInfoWithSignatures() string {
	if x != nil {
		return x.LedgerInfoWithSignatures
	}
	return ""
}

func (x *StateProof) GetEpochChangeProof() string {
	if x != nil {
		return x.EpochChangeProof
	}
	return ""
}

func (x *StateProof) GetLedgerConsistencyProof() string {
	if x != nil {
		return x.LedgerConsistencyProof
	}
	return ""
}

type AccountStateWithProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// hex-encoded bcs bytes
	Blob string `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	// hex-encoded bcs bytes
	Proof *AccountStateProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *AccountStateWithProof) Reset() {
	*x = AccountStateWithProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStateWithProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStateWithProof) ProtoMessage() {}

func (x *AccountStateWithProof) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStateWithProof.ProtoReflect.Descriptor instead.
func (*AccountStateWithProof) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{13}
}

func (x *AccountStateWithProof) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AccountStateWithProof) GetBlob() string {
	if x != nil {
		return x.Blob
	}
	return ""
}

func (x *AccountStateWithProof) GetProof() *AccountStateProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type AccountStateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex-encoded bcs bytes
	LedgerInfoToTransactionInfoProof string `protobuf:"bytes,1,opt,name=ledger_info_to_transaction_info_proof,proto3" json:"ledger_info_to_transaction_info_proof,omitempty"`
	// hex-encoded bcs bytes
	TransactionInfo string `protobuf:"bytes,2,opt,name=transaction_info,proto3" json:"transaction_info,omitempty"`
	// hex-encoded bcs bytes
	TransactionInfoToAccountProof string `protobuf:"bytes,3,opt,name=transaction_info_to_account_proof,proto3" json:"transaction_info_to_account_proof,omitempty"`
}

func (x *AccountStateProof) Reset() {
	*x = AccountStateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStateProof) ProtoMessage() {}

func (x *AccountStateProof) ProtoReflect() protoreflect.Message {
	mi := &file_jsonrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStateProof.ProtoReflect.Descriptor instead.
func (*AccountStateProof) Descriptor() ([]byte, []int) {
	return file_jsonrpc_proto_rawDescGZIP(), []int{14}
}

func (x *AccountStateProof) GetLedgerInfoToTransactionInfoProof() string {
	if x != nil {
		return x.LedgerInfoToTransactionInfoProof
	}
	return ""
}

func (x *AccountStateProof) GetTransactionInfo() string {
	if x != nil {
		return x.TransactionInfo
	}
	return ""
}

func (x *AccountStateProof) GetTransactionInfoToAccountProof() string {
	if x != nil {
		return x.TransactionInfoToAccountProof
	}
	return ""
}

var File_jsonrpc_proto protoreflect.FileDescriptor

var file_jsonrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x22, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xfc, 0x03, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12,
	0x4c, 0x0a, 0x21, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a,
	0x1f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x73, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x72, 0x65, 0x62, 0x75, 0x72,
	0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xda, 0x05, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x5f,
	0x78, 0x64, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x5f,
	0x78, 0x64, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x69, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x82, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x76, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x76, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x40,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb8, 0x04, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c,
	0x0a, 0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x06,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xae, 0x03, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x78, 0x64,
	0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x5f, 0x78, 0x64, 0x78, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x1f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x77,
	0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xe3, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x54, 0x0a,
	0x25, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x4c, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x34, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x2e, 0x64, 0x69, 0x65, 0x6d, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70,
	0x63, 0x42, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x5a, 0x17, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x65, 0x6d, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jsonrpc_proto_rawDescOnce sync.Once
	file_jsonrpc_proto_rawDescData = file_jsonrpc_proto_rawDesc
)

func file_jsonrpc_proto_rawDescGZIP() []byte {
	file_jsonrpc_proto_rawDescOnce.Do(func() {
		file_jsonrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_jsonrpc_proto_rawDescData)
	})
	return file_jsonrpc_proto_rawDescData
}

var file_jsonrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_jsonrpc_proto_goTypes = []interface{}{
	(*Amount)(nil),                // 0: jsonrpc.Amount
	(*Account)(nil),               // 1: jsonrpc.Account
	(*AccountRole)(nil),           // 2: jsonrpc.AccountRole
	(*Event)(nil),                 // 3: jsonrpc.Event
	(*EventData)(nil),             // 4: jsonrpc.EventData
	(*Metadata)(nil),              // 5: jsonrpc.Metadata
	(*Transaction)(nil),           // 6: jsonrpc.Transaction
	(*MoveAbortExplaination)(nil), // 7: jsonrpc.MoveAbortExplaination
	(*VMStatus)(nil),              // 8: jsonrpc.VMStatus
	(*TransactionData)(nil),       // 9: jsonrpc.TransactionData
	(*Script)(nil),                // 10: jsonrpc.Script
	(*CurrencyInfo)(nil),          // 11: jsonrpc.CurrencyInfo
	(*StateProof)(nil),            // 12: jsonrpc.StateProof
	(*AccountStateWithProof)(nil), // 13: jsonrpc.AccountStateWithProof
	(*AccountStateProof)(nil),     // 14: jsonrpc.AccountStateProof
}
var file_jsonrpc_proto_depIdxs = []int32{
	0,  // 0: jsonrpc.Account.balances:type_name -> jsonrpc.Amount
	2,  // 1: jsonrpc.Account.role:type_name -> jsonrpc.AccountRole
	0,  // 2: jsonrpc.AccountRole.preburn_balances:type_name -> jsonrpc.Amount
	4,  // 3: jsonrpc.Event.data:type_name -> jsonrpc.EventData
	0,  // 4: jsonrpc.EventData.amount:type_name -> jsonrpc.Amount
	9,  // 5: jsonrpc.Transaction.transaction:type_name -> jsonrpc.TransactionData
	3,  // 6: jsonrpc.Transaction.events:type_name -> jsonrpc.Event
	8,  // 7: jsonrpc.Transaction.vm_status:type_name -> jsonrpc.VMStatus
	7,  // 8: jsonrpc.VMStatus.explanation:type_name -> jsonrpc.MoveAbortExplaination
	10, // 9: jsonrpc.TransactionData.script:type_name -> jsonrpc.Script
	14, // 10: jsonrpc.AccountStateWithProof.proof:type_name -> jsonrpc.AccountStateProof
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_jsonrpc_proto_init() }
func file_jsonrpc_proto_init() {
	if File_jsonrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jsonrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveAbortExplaination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStateWithProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jsonrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jsonrpc_proto_goTypes,
		DependencyIndexes: file_jsonrpc_proto_depIdxs,
		MessageInfos:      file_jsonrpc_proto_msgTypes,
	}.Build()
	File_jsonrpc_proto = out.File
	file_jsonrpc_proto_rawDesc = nil
	file_jsonrpc_proto_goTypes = nil
	file_jsonrpc_proto_depIdxs = nil
}
